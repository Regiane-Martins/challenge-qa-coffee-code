{
  "version": 3,
  "sources": ["../../../allure-js-commons/src/model.ts", "../../../allure-js-commons/src/sdk/runtime/NoopTestRuntime.ts", "../../../allure-js-commons/src/sdk/runtime/runtime.ts", "../../../allure-js-commons/src/sdk/utils.ts", "../../../allure-js-commons/src/facade.ts", "../../src/utils.ts", "../../src/index.ts"],
  "sourcesContent": ["export interface Attachment {\n  name: string;\n  type?: string;\n  source: string;\n}\n\nexport interface AttachmentOptions {\n  contentType: ContentType | string;\n  encoding?: BufferEncoding;\n  fileExtension?: string;\n}\n\nexport interface Label {\n  name: LabelName | string;\n  value: string;\n}\n\nexport interface Link {\n  name?: string;\n  url: string;\n  type?: LinkType | string;\n}\n\nexport type ParameterMode = \"hidden\" | \"masked\" | \"default\";\n\nexport interface Parameter {\n  name: string;\n  value: string;\n  excluded?: boolean;\n  mode?: ParameterMode;\n}\n\nexport type ParameterOptions = Pick<Parameter, \"mode\" | \"excluded\">;\n\nexport interface StatusDetails {\n  message?: string;\n  trace?: string;\n}\n\n// don't use the interface as is, use Results types instead\ninterface Executable {\n  name?: string;\n  status?: Status;\n  statusDetails: StatusDetails;\n  stage: Stage;\n  description?: string;\n  descriptionHtml?: string;\n  steps: StepResult[];\n  attachments: Attachment[];\n  parameters: Parameter[];\n  start?: number;\n  stop?: number;\n}\n\nexport interface FixtureResult extends Executable {}\n\nexport interface StepResult extends Executable {}\n\nexport interface TestResult extends Executable {\n  uuid: string;\n  historyId?: string;\n  fullName?: string;\n  testCaseId?: string;\n  labels: Label[];\n  links: Link[];\n}\n\nexport interface TestResultContainer {\n  uuid: string;\n  name?: string;\n  children: string[];\n  befores: FixtureResult[];\n  afters: FixtureResult[];\n}\n\nexport type TestOrStepResult = StepResult | TestResult;\n\n/* eslint-disable no-shadow */\nexport enum Status {\n  FAILED = \"failed\",\n  BROKEN = \"broken\",\n  PASSED = \"passed\",\n  SKIPPED = \"skipped\",\n}\n\nexport const StatusByPriority = [Status.FAILED, Status.BROKEN, Status.PASSED, Status.SKIPPED];\n\n/* eslint-disable no-shadow */\nexport enum Stage {\n  SCHEDULED = \"scheduled\",\n  RUNNING = \"running\",\n  FINISHED = \"finished\",\n  PENDING = \"pending\",\n  INTERRUPTED = \"interrupted\",\n}\n\n/* eslint-disable no-shadow */\nexport enum LabelName {\n  ALLURE_ID = \"ALLURE_ID\",\n  /**\n   * @deprecated please use ALLURE_ID instead\n   */\n  AS_ID = ALLURE_ID,\n  SUITE = \"suite\",\n  PARENT_SUITE = \"parentSuite\",\n  SUB_SUITE = \"subSuite\",\n  EPIC = \"epic\",\n  FEATURE = \"feature\",\n  STORY = \"story\",\n  SEVERITY = \"severity\",\n  TAG = \"tag\",\n  OWNER = \"owner\",\n  LEAD = \"lead\",\n  HOST = \"host\",\n  THREAD = \"thread\",\n  TEST_METHOD = \"testMethod\",\n  TEST_CLASS = \"testClass\",\n  PACKAGE = \"package\",\n  FRAMEWORK = \"framework\",\n  LANGUAGE = \"language\",\n  LAYER = \"layer\",\n}\n\n/* eslint-disable no-shadow */\nexport enum Severity {\n  BLOCKER = \"blocker\",\n  CRITICAL = \"critical\",\n  NORMAL = \"normal\",\n  MINOR = \"minor\",\n  TRIVIAL = \"trivial\",\n}\n\n/* eslint-disable no-shadow */\nexport enum ContentType {\n  TEXT = \"text/plain\",\n  XML = \"application/xml\",\n  HTML = \"text/html\",\n  CSV = \"text/csv\",\n  TSV = \"text/tab-separated-values\",\n  CSS = \"text/css\",\n  URI = \"text/uri-list\",\n  SVG = \"image/svg+xml\",\n  PNG = \"image/png\",\n  JSON = \"application/json\",\n  ZIP = \"application/zip\",\n  WEBM = \"video/webm\",\n  JPEG = \"image/jpeg\",\n  MP4 = \"video/mp4\",\n  IMAGEDIFF = \"application/vnd.allure.image.diff\",\n}\n\n/* eslint-disable no-shadow */\nexport enum LinkType {\n  ISSUE = \"issue\",\n  TMS = \"tms\",\n}\n\nexport interface ImageDiffAttachment {\n  expected: string | undefined; // data:image;base64,\n  actual: string | undefined; // data:image;base64,\n  diff: string | undefined; // data:image;base64,\n  name: string;\n}\n", "import type { TestRuntime } from \"./types.js\";\n\nexport class NoopTestRuntime implements TestRuntime {\n  async attachment() {\n    await this.warning();\n  }\n\n  async attachmentFromPath() {\n    await this.warning();\n  }\n\n  async description() {\n    await this.warning();\n  }\n\n  async descriptionHtml() {\n    await this.warning();\n  }\n\n  async displayName() {\n    await this.warning();\n  }\n\n  async historyId() {\n    await this.warning();\n  }\n\n  async labels() {\n    await this.warning();\n  }\n\n  async links() {\n    await this.warning();\n  }\n\n  async parameter() {\n    await this.warning();\n  }\n\n  async step<T>(name: string, body: () => T | PromiseLike<T>): Promise<T> {\n    await this.warning();\n    return body();\n  }\n\n  async stepDisplayName() {\n    await this.warning();\n  }\n\n  async stepParameter() {\n    await this.warning();\n  }\n\n  async testCaseId() {\n    await this.warning();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async warning() {\n    // eslint-disable-next-line no-console\n    console.log(\"no test runtime is found. Please check test framework configuration\");\n  }\n}\n\nexport const noopRuntime: TestRuntime = new NoopTestRuntime();\n", "import { noopRuntime } from \"./NoopTestRuntime.js\";\nimport type { TestRuntime } from \"./types.js\";\n\nconst ALLURE_TEST_RUNTIME_KEY = \"allureTestRuntime\";\n\nexport const setGlobalTestRuntime = (runtime: TestRuntime) => {\n  (globalThis as any)[ALLURE_TEST_RUNTIME_KEY] = () => runtime;\n};\n\nconst getGlobalTestRuntimeFunction = () => {\n  return (globalThis as any)?.[ALLURE_TEST_RUNTIME_KEY] as (() => TestRuntime | undefined) | undefined;\n};\n\nexport const getGlobalTestRuntime = (): TestRuntime => {\n  const testRuntime = getGlobalTestRuntimeFunction();\n\n  if (testRuntime) {\n    return testRuntime() ?? noopRuntime;\n  }\n\n  return noopRuntime;\n};\n\nexport const getGlobalTestRuntimeWithAutoconfig = (): TestRuntime | Promise<TestRuntime> => {\n  const testRuntime = getGlobalTestRuntimeFunction();\n\n  if (testRuntime) {\n    return testRuntime() ?? noopRuntime;\n  }\n\n  if (\"_playwrightInstance\" in globalThis) {\n    try {\n      // protection from bundlers tree-shaking visiting (webpack, rollup)\n      // @ts-ignore\n      // eslint-disable-next-line no-eval\n      return (0, eval)(\"(() => import('allure-playwright/autoconfig'))()\").then(() => {\n        return getGlobalTestRuntimeFunction()?.() ?? noopRuntime;\n      });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.log(\"can't execute allure-playwright/autoconfig\", err);\n      return noopRuntime;\n    }\n  }\n\n  return noopRuntime;\n};\n", "import type { FixtureResult, Label, StatusDetails, StepResult, TestResult } from \"../model.js\";\nimport { LabelName, Status } from \"../model.js\";\nimport type { RuntimeMessage } from \"./types.js\";\n\nexport const getStatusFromError = (error: Error): Status => {\n  switch (true) {\n    /**\n     * Native `node:assert` and `chai` (`vitest` uses it under the hood) throw `AssertionError`\n     * `jest` throws `JestAssertionError` instance\n     * `jasmine` throws `ExpectationFailed` instance\n     */\n    case /assert/gi.test(error.constructor.name):\n    case /expectation/gi.test(error.constructor.name):\n    case /assert/gi.test(error.name):\n    case /assert/gi.test(error.message):\n      return Status.FAILED;\n    default:\n      return Status.BROKEN;\n  }\n};\n\n/**\n * Source: https://github.com/chalk/ansi-regex\n */\nconst ansiRegex = ({ onlyFirst = false } = {}) => {\n  const pattern = [\n    \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\n    \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-nq-uy=><~]))\",\n  ].join(\"|\");\n\n  return new RegExp(pattern, onlyFirst ? undefined : \"g\");\n};\n\n/**\n * https://github.com/chalk/strip-ansi\n */\nexport const stripAnsi = (str: string): string => {\n  const regex = ansiRegex();\n  return str.replace(regex, \"\");\n};\n\nexport const getMessageAndTraceFromError = (\n  error: Error | { message?: string; stack?: string },\n): Pick<StatusDetails, \"message\" | \"trace\"> => {\n  const { message, stack } = error;\n  return {\n    message: message ? stripAnsi(message) : undefined,\n    trace: stack ? stripAnsi(stack) : undefined,\n  };\n};\n\nexport const allureIdRegexp = /@?allure.id[:=](?<id>[^\\s]+)/;\nexport const allureIdRegexpGlobal = new RegExp(allureIdRegexp, \"g\");\nexport const allureLabelRegexp = /@?allure.label.(?<name>[^\\s]+?)[:=](?<value>[^\\s]+)/;\nexport const allureLabelRegexpGlobal = new RegExp(allureLabelRegexp, \"g\");\n\nexport const extractMetadataFromString = (\n  title: string,\n): {\n  labels: Label[];\n  cleanTitle: string;\n} => {\n  const labels = [] as Label[];\n\n  title.split(\" \").forEach((val) => {\n    const idValue = val.match(allureIdRegexp)?.groups?.id;\n\n    if (idValue) {\n      labels.push({ name: LabelName.ALLURE_ID, value: idValue });\n    }\n\n    const labelMatch = val.match(allureLabelRegexp);\n    const { name, value } = labelMatch?.groups || {};\n\n    if (name && value) {\n      labels?.push({ name, value });\n    }\n  });\n\n  const cleanTitle = title.replace(allureLabelRegexpGlobal, \"\").replace(allureIdRegexpGlobal, \"\").trim();\n\n  return { labels, cleanTitle };\n};\n\nexport const isAnyStepFailed = (item: StepResult | TestResult | FixtureResult): boolean => {\n  const isFailed = item.status === Status.FAILED;\n\n  if (isFailed || item.steps.length === 0) {\n    return isFailed;\n  }\n\n  return !!item.steps.find((step) => isAnyStepFailed(step));\n};\n\nexport const isAllStepsEnded = (item: StepResult | TestResult | FixtureResult): boolean => {\n  return item.steps.every((val) => val.stop && isAllStepsEnded(val));\n};\n\nexport const hasLabel = (testResult: TestResult, labelName: LabelName | string): boolean => {\n  return !!testResult.labels.find((l) => l.name === labelName);\n};\n\nexport const hasStepMessage = (messages: RuntimeMessage[]) => {\n  return messages.some((message) => message.type === \"step_start\" || message.type === \"step_stop\");\n};\n\nexport const getStepsMessagesPair = (messages: RuntimeMessage[]) =>\n  messages.reduce((acc, message) => {\n    if (message.type !== \"step_start\" && message.type !== \"step_stop\") {\n      return acc;\n    }\n\n    if (message.type === \"step_start\") {\n      acc.push([message]);\n\n      return acc;\n    }\n\n    const unfinishedStepIdx = acc.findLastIndex((step) => step.length === 1);\n\n    if (unfinishedStepIdx === -1) {\n      return acc;\n    }\n\n    acc[unfinishedStepIdx].push(message);\n\n    return acc;\n  }, [] as RuntimeMessage[][]);\n\nexport const getUnfinishedStepsMessages = (messages: RuntimeMessage[]) => {\n  const grouppedStepsMessage = getStepsMessagesPair(messages);\n\n  return grouppedStepsMessage.filter((step) => step.length === 1);\n};\n\nexport const isPromise = (obj: any): boolean =>\n  !!obj && (typeof obj === \"object\" || typeof obj === \"function\") && typeof obj.then === \"function\";\n", "import type { ContentType } from \"./model.js\";\nimport { type AttachmentOptions, type Label, type Link, type ParameterMode, type ParameterOptions } from \"./model.js\";\nimport { LabelName, LinkType } from \"./model.js\";\nimport { getGlobalTestRuntimeWithAutoconfig } from \"./sdk/runtime/runtime.js\";\nimport type { TestRuntime } from \"./sdk/runtime/types.js\";\nimport { isPromise } from \"./sdk/utils.js\";\n\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype ArgumentTypes<F extends Function> = F extends (...args: infer A) => any ? A : never;\nconst callRuntimeMethod = <T extends keyof TestRuntime, S extends ArgumentTypes<TestRuntime[T]>>(\n  method: T,\n  ...args: S\n) => {\n  const runtime = getGlobalTestRuntimeWithAutoconfig();\n\n  if (!isPromise(runtime)) {\n    // @ts-ignore\n    return (runtime as TestRuntime)[method](...args);\n  }\n\n  return (runtime as Promise<TestRuntime>).then((testRuntime) => {\n    // @ts-ignore\n    return testRuntime[method](...args);\n  });\n};\n\nexport const label = (name: LabelName | string, value: string) => {\n  return callRuntimeMethod(\"labels\", { name, value });\n};\n\nexport const labels = (...labelsList: Label[]) => {\n  return callRuntimeMethod(\"labels\", ...labelsList);\n};\n\nexport const link = (url: string, name?: string, type?: LinkType | string) => {\n  return callRuntimeMethod(\"links\", { url, type, name });\n};\n\nexport const links = (...linksList: Link[]) => {\n  return callRuntimeMethod(\"links\", ...linksList);\n};\n\nexport const parameter = (name: string, value: string, options?: ParameterOptions) => {\n  return callRuntimeMethod(\"parameter\", name, value, options);\n};\n\nexport const description = (markdown: string) => {\n  return callRuntimeMethod(\"description\", markdown);\n};\n\nexport const descriptionHtml = (html: string) => {\n  return callRuntimeMethod(\"descriptionHtml\", html);\n};\n\nexport const displayName = (name: string) => {\n  return callRuntimeMethod(\"displayName\", name);\n};\n\nexport const historyId = (value: string) => {\n  return callRuntimeMethod(\"historyId\", value);\n};\n\nexport const testCaseId = (value: string) => {\n  return callRuntimeMethod(\"testCaseId\", value);\n};\n\nexport const attachment = (\n  name: string,\n  content: Buffer | string,\n  options: ContentType | string | AttachmentOptions,\n) => {\n  const opts = typeof options === \"string\" ? { contentType: options } : options;\n  return callRuntimeMethod(\"attachment\", name, content, opts);\n};\n\nexport const attachmentPath = (\n  name: string,\n  path: string,\n  options: ContentType | string | Omit<AttachmentOptions, \"encoding\">,\n) => {\n  const opts = typeof options === \"string\" ? { contentType: options } : options;\n  return callRuntimeMethod(\"attachmentFromPath\", name, path, opts);\n};\n\nexport type StepContext = {\n  displayName: (name: string) => void | PromiseLike<void>;\n  parameter: (name: string, value: string, mode?: ParameterMode) => void | PromiseLike<void>;\n};\n\nconst stepContext: () => StepContext = () => ({\n  displayName: (name: string) => {\n    return callRuntimeMethod(\"stepDisplayName\", name);\n  },\n  parameter: (name, value, mode?) => {\n    return callRuntimeMethod(\"stepParameter\", name, value, mode);\n  },\n});\n\nexport const step = <T = void>(name: string, body: (context: StepContext) => T | PromiseLike<T>) => {\n  return callRuntimeMethod(\"step\", name, () => body(stepContext()));\n};\n\nexport const issue = (url: string, name?: string) => link(url, name, LinkType.ISSUE);\n\nexport const tms = (url: string, name?: string) => link(url, name, LinkType.TMS);\n\nexport const allureId = (value: string) => label(LabelName.ALLURE_ID, value);\n\nexport const epic = (name: string) => label(LabelName.EPIC, name);\n\nexport const feature = (name: string) => label(LabelName.FEATURE, name);\n\nexport const story = (name: string) => label(LabelName.STORY, name);\n\nexport const suite = (name: string) => label(LabelName.SUITE, name);\n\nexport const parentSuite = (name: string) => label(LabelName.PARENT_SUITE, name);\n\nexport const subSuite = (name: string) => label(LabelName.SUB_SUITE, name);\n\nexport const owner = (name: string) => label(LabelName.OWNER, name);\n\nexport const severity = (name: string) => label(LabelName.SEVERITY, name);\n\nexport const layer = (name: string) => label(LabelName.LAYER, name);\n\nexport const tag = (name: string) => label(LabelName.TAG, name);\n\nexport const tags = (...tagsList: string[]) => {\n  return callRuntimeMethod(\"labels\", ...tagsList.map((value) => ({ name: LabelName.TAG, value })));\n};\n", "export const uint8ArrayToBase64 = (data: unknown) => {\n  // @ts-ignore\n  const u8arrayLike = Array.isArray(data) || data.buffer;\n\n  if (!u8arrayLike) {\n    return data as string;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  return btoa(String.fromCharCode.apply(null, data as number[]));\n};\n\nexport const normalizeAttachmentContentEncoding = (data: unknown, encoding: BufferEncoding): BufferEncoding => {\n  // @ts-ignore\n  const u8arrayLike = Array.isArray(data) || data.buffer;\n\n  if (u8arrayLike) {\n    return \"base64\";\n  }\n\n  return encoding;\n};\n\nexport const getSuitePath = (test: Mocha.Test): string[] => {\n  const path: string[] = [];\n  let currentSuite: Mocha.Suite | undefined = test.parent;\n\n  while (currentSuite) {\n    if (currentSuite.title) {\n      path.unshift(currentSuite.title);\n    }\n\n    currentSuite = currentSuite.parent;\n  }\n\n  return path;\n};\n", "import { ContentType, Stage, Status } from \"allure-js-commons\";\nimport type { AttachmentOptions, Label, Link, ParameterMode, ParameterOptions } from \"allure-js-commons\";\nimport type { RuntimeMessage } from \"allure-js-commons/sdk\";\nimport { getUnfinishedStepsMessages, hasStepMessage } from \"allure-js-commons/sdk\";\nimport type { TestRuntime } from \"allure-js-commons/sdk/runtime\";\nimport { getGlobalTestRuntime, setGlobalTestRuntime } from \"allure-js-commons/sdk/runtime\";\nimport type { CypressRuntimeMessage } from \"./model.js\";\nimport { getSuitePath, normalizeAttachmentContentEncoding, uint8ArrayToBase64 } from \"./utils.js\";\n\nexport class AllureCypressTestRuntime implements TestRuntime {\n  labels(...labels: Label[]) {\n    return this.sendMessageAsync({\n      type: \"metadata\",\n      data: {\n        labels,\n      },\n    });\n  }\n\n  links(...links: Link[]) {\n    return this.sendMessageAsync({\n      type: \"metadata\",\n      data: {\n        links,\n      },\n    });\n  }\n\n  parameter(name: string, value: string, options?: ParameterOptions) {\n    return this.sendMessageAsync({\n      type: \"metadata\",\n      data: {\n        parameters: [\n          {\n            name,\n            value,\n            ...options,\n          },\n        ],\n      },\n    });\n  }\n\n  description(markdown: string) {\n    return this.sendMessageAsync({\n      type: \"metadata\",\n      data: {\n        description: markdown,\n      },\n    });\n  }\n\n  descriptionHtml(html: string) {\n    return this.sendMessageAsync({\n      type: \"metadata\",\n      data: {\n        descriptionHtml: html,\n      },\n    });\n  }\n\n  displayName(name: string) {\n    return this.sendMessageAsync({\n      type: \"metadata\",\n      data: {\n        displayName: name,\n      },\n    });\n  }\n\n  historyId(value: string) {\n    return this.sendMessageAsync({\n      type: \"metadata\",\n      data: {\n        historyId: value,\n      },\n    });\n  }\n\n  testCaseId(value: string) {\n    return this.sendMessageAsync({\n      type: \"metadata\",\n      data: {\n        testCaseId: value,\n      },\n    });\n  }\n\n  attachment(name: string, content: Buffer | string, options: AttachmentOptions) {\n    // @ts-ignore\n    const attachmentRawContent: string | Uint8Array = content?.type === \"Buffer\" ? content.data : content;\n    const encoding = content instanceof Buffer ? \"base64\" : \"utf-8\";\n    const actualEncoding = normalizeAttachmentContentEncoding(attachmentRawContent, encoding);\n    const attachmentContent = uint8ArrayToBase64(attachmentRawContent);\n\n    return this.sendMessageAsync({\n      type: \"attachment_content\",\n      data: {\n        name,\n        content: attachmentContent,\n        encoding: actualEncoding,\n        contentType: options.contentType,\n        fileExtension: options.fileExtension,\n      },\n    });\n  }\n\n  attachmentFromPath(name: string, path: string, options: Omit<AttachmentOptions, \"encoding\">) {\n    return this.sendMessageAsync({\n      type: \"attachment_path\",\n      data: {\n        name,\n        path,\n        contentType: options.contentType,\n        fileExtension: options.fileExtension,\n      },\n    });\n  }\n\n  step<T = void>(name: string, body: () => T | PromiseLike<T>) {\n    return cy\n      .wrap(null, { log: false })\n      .then(() => {\n        this.sendMessage({\n          type: \"step_start\",\n          data: { name, start: Date.now() },\n        });\n\n        return Cypress.Promise.resolve(body());\n      })\n      .then((result) => {\n        return this.sendMessageAsync({\n          type: \"step_stop\",\n          data: {\n            status: Status.PASSED,\n            stage: Stage.FINISHED,\n            stop: Date.now(),\n          },\n        }).then(() => result);\n      });\n  }\n\n  stepDisplayName(name: string) {\n    return this.sendMessageAsync({\n      type: \"step_metadata\",\n      data: { name },\n    });\n  }\n\n  stepParameter(name: string, value: string, mode?: ParameterMode) {\n    return this.sendMessageAsync({\n      type: \"step_metadata\",\n      data: {\n        parameters: [{ name, value, mode }],\n      },\n    });\n  }\n\n  sendMessage(message: CypressRuntimeMessage) {\n    const messages = Cypress.env(\"allureRuntimeMessages\") || [];\n\n    Cypress.env(\"allureRuntimeMessages\", messages.concat(message));\n  }\n\n  sendMessageAsync(message: CypressRuntimeMessage): PromiseLike<void> {\n    this.sendMessage(message);\n    return Cypress.Promise.resolve();\n  }\n}\n\nconst { EVENT_TEST_BEGIN, EVENT_TEST_FAIL, EVENT_TEST_PASS } = Mocha.Runner.constants;\n\nconst initializeAllure = () => {\n  const initialized = Cypress.env(\"allureInitialized\") as boolean;\n\n  if (initialized) {\n    return;\n  }\n\n  // @ts-ignore\n  Cypress.mocha\n    .getRunner()\n    .on(EVENT_TEST_BEGIN, (test: Mocha.Test) => {\n      const testRuntime = new AllureCypressTestRuntime();\n\n      Cypress.env(\"allureRuntimeMessages\", []);\n\n      testRuntime.sendMessage({\n        type: \"cypress_start\",\n        data: {\n          isInteractive: Cypress.config(\"isInteractive\"),\n          absolutePath: Cypress.spec.absolute,\n          specPath: getSuitePath(test).concat(test.title),\n          filename: Cypress.spec.relative,\n          start: Date.now(),\n        },\n      });\n\n      setGlobalTestRuntime(testRuntime);\n    })\n    .on(EVENT_TEST_PASS, () => {\n      const testRuntime = getGlobalTestRuntime() as AllureCypressTestRuntime;\n      const runtimeMessages = Cypress.env(\"allureRuntimeMessages\") as CypressRuntimeMessage[];\n      const unfinishedStepsMessages = getUnfinishedStepsMessages(runtimeMessages as RuntimeMessage[]);\n\n      unfinishedStepsMessages.forEach(() => {\n        testRuntime.sendMessage({\n          type: \"step_stop\",\n          data: {\n            stage: Stage.FINISHED,\n            status: Status.PASSED,\n            stop: Date.now(),\n          },\n        });\n      });\n      testRuntime.sendMessage({\n        type: \"cypress_end\",\n        data: {\n          stage: Stage.FINISHED,\n          status: Status.PASSED,\n          stop: Date.now(),\n        },\n      });\n    })\n    .on(EVENT_TEST_FAIL, (test: Mocha.Test, err: Error) => {\n      const testRuntime = getGlobalTestRuntime() as AllureCypressTestRuntime;\n\n      testRuntime.sendMessage({\n        type: \"cypress_end\",\n        data: {\n          stage: Stage.FINISHED,\n          status: err.constructor.name === \"AssertionError\" ? Status.FAILED : Status.BROKEN,\n          statusDetails: {\n            message: err.message,\n            trace: err.stack,\n          },\n          stop: Date.now(),\n        },\n      });\n    });\n\n  Cypress.Screenshot.defaults({\n    onAfterScreenshot: (_, details) => {\n      const testRuntime = getGlobalTestRuntime() as AllureCypressTestRuntime;\n\n      return testRuntime.sendMessageAsync({\n        type: \"attachment_path\",\n        data: {\n          path: details.path,\n          name: details.name || \"Screenshot\",\n          contentType: ContentType.PNG,\n        },\n      });\n    },\n  });\n\n  Cypress.on(\"fail\", (err) => {\n    const testRuntime = getGlobalTestRuntime() as AllureCypressTestRuntime;\n    const runtimeMessages = Cypress.env(\"allureRuntimeMessages\") as CypressRuntimeMessage[];\n    const hasSteps = hasStepMessage(runtimeMessages as RuntimeMessage[]);\n\n    // if there is no steps, don't handle the error\n    if (!hasSteps) {\n      throw err;\n    }\n\n    const unfinishedStepsMessages = getUnfinishedStepsMessages(runtimeMessages as RuntimeMessage[]);\n\n    if (unfinishedStepsMessages.length === 0) {\n      throw err;\n    }\n\n    const failedStepsStatus = err.constructor.name === \"AssertionError\" ? Status.FAILED : Status.BROKEN;\n\n    unfinishedStepsMessages.forEach(() => {\n      testRuntime.sendMessage({\n        type: \"step_stop\",\n        data: {\n          stage: Stage.FINISHED,\n          status: failedStepsStatus,\n          stop: Date.now(),\n          statusDetails: {\n            message: err.message,\n            trace: err.stack,\n          },\n        },\n      });\n    });\n\n    throw err;\n  });\n\n  afterEach(() => {\n    const runtimeMessages = Cypress.env(\"allureRuntimeMessages\") as CypressRuntimeMessage[];\n\n    cy.task(\"allureReportTest\", runtimeMessages, { log: false });\n  });\n\n  Cypress.env(\"allureInitialized\", true);\n};\n\ninitializeAllure();\n\nexport * from \"allure-js-commons\";\n"],
  "mappings": "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",
  "names": ["Status", "StatusByPriority", "FAILED", "BROKEN", "PASSED", "SKIPPED", "Stage", "LabelName", "Severity", "ContentType", "LinkType", "NoopTestRuntime", "attachment", "_this", "_asyncToGenerator", "warning", "attachmentFromPath", "_this2", "description", "_this3", "descriptionHtml", "_this4", "displayName", "_this5", "historyId", "_this6", "labels", "_this7", "links", "_this8", "parameter", "_this9", "step", "name", "body", "_this10", "stepDisplayName", "_this11", "stepParameter", "_this12", "testCaseId", "_this13", "console", "log", "noopRuntime", "ALLURE_TEST_RUNTIME_KEY", "setGlobalTestRuntime", "runtime", "globalThis", "getGlobalTestRuntimeFunction", "getGlobalTestRuntime", "testRuntime", "_testRuntime", "noopRuntime", "getGlobalTestRuntimeWithAutoconfig", "_testRuntime2", "eval", "then", "_getGlobalTestRuntime", "_getGlobalTestRuntime2", "err", "console", "log", "allureIdRegexp", "_wrapRegExp", "id", "allureIdRegexpGlobal", "RegExp", "allureLabelRegexp", "name", "value", "allureLabelRegexpGlobal", "hasStepMessage", "messages", "some", "message", "type", "getStepsMessagesPair", "reduce", "acc", "push", "unfinishedStepIdx", "findLastIndex", "step", "length", "getUnfinishedStepsMessages", "grouppedStepsMessage", "filter", "isPromise", "obj", "then", "callRuntimeMethod", "method", "_len", "arguments", "length", "args", "Array", "_key", "runtime", "getGlobalTestRuntimeWithAutoconfig", "isPromise", "then", "testRuntime", "label", "name", "value", "labels", "_len2", "labelsList", "_key2", "link", "url", "type", "links", "_len3", "linksList", "_key3", "parameter", "options", "description", "markdown", "descriptionHtml", "html", "displayName", "historyId", "testCaseId", "attachment", "content", "opts", "contentType", "stepContext", "displayName", "name", "callRuntimeMethod", "parameter", "value", "mode", "step", "body", "issue", "url", "link", "LinkType", "ISSUE", "tms", "TMS", "allureId", "label", "LabelName", "ALLURE_ID", "epic", "EPIC", "feature", "FEATURE", "story", "STORY", "suite", "SUITE", "parentSuite", "PARENT_SUITE", "subSuite", "SUB_SUITE", "owner", "OWNER", "severity", "SEVERITY", "layer", "LAYER", "tag", "TAG", "tags", "_len4", "arguments", "length", "tagsList", "Array", "_key4", "map", "uint8ArrayToBase64", "data", "normalizeAttachmentContentEncoding", "encoding", "getSuitePath", "test", "path", "currentSuite", "AllureCypressTestRuntime", "labels", "links", "name", "value", "options", "markdown", "html", "content", "attachmentRawContent", "encoding", "actualEncoding", "normalizeAttachmentContentEncoding", "attachmentContent", "uint8ArrayToBase64", "path", "body", "result", "Status", "Stage", "mode", "message", "messages", "EVENT_TEST_BEGIN", "EVENT_TEST_FAIL", "EVENT_TEST_PASS", "initializeAllure", "test", "testRuntime", "getSuitePath", "setGlobalTestRuntime", "getGlobalTestRuntime", "runtimeMessages", "getUnfinishedStepsMessages", "err", "_", "details", "ContentType", "hasStepMessage", "unfinishedStepsMessages", "failedStepsStatus"]
}
