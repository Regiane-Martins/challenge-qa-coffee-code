var _excluded = ["resultsDir"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { ContentType, LabelName, Stage } from "allure-js-commons";
import { extractMetadataFromString } from "allure-js-commons/sdk";
import { FileSystemWriter, ReporterRuntime, getSuiteLabels } from "allure-js-commons/sdk/reporter";
export class AllureCypress {
  constructor(config) {
    _defineProperty(this, "runtime", void 0);
    _defineProperty(this, "testsUuidsByCypressAbsolutePath", new Map());
    var _ref = config || {},
      {
        resultsDir = "./allure-results"
      } = _ref,
      rest = _objectWithoutProperties(_ref, _excluded);
    this.runtime = new ReporterRuntime(_objectSpread({
      writer: new FileSystemWriter({
        resultsDir
      })
    }, rest));
  }
  pushTestUuid(absolutePath, uuid) {
    var currentUuids = this.testsUuidsByCypressAbsolutePath.get(absolutePath) || [];
    this.testsUuidsByCypressAbsolutePath.set(absolutePath, [...currentUuids, uuid]);
  }
  attachToCypress(on) {
    on("task", {
      allureReportTest: messages => {
        var startMessage = messages[0];
        var endMessage = messages[messages.length - 1];
        if (startMessage.type !== "cypress_start" || endMessage.type !== "cypress_end") {
          throw new Error("INTERNAL ERROR: Invalid message sequence");
        }
        var suiteLabels = getSuiteLabels(startMessage.data.specPath.slice(0, -1));
        var testTitle = startMessage.data.specPath[startMessage.data.specPath.length - 1];
        var titleMetadata = extractMetadataFromString(testTitle);
        var testUuid = this.runtime.startTest({
          name: titleMetadata.cleanTitle || testTitle,
          start: startMessage.data.start,
          fullName: "".concat(startMessage.data.filename, "#").concat(startMessage.data.specPath.join(" ")),
          stage: Stage.RUNNING
        });
        this.runtime.updateTest(result => {
          result.labels.push({
            name: LabelName.LANGUAGE,
            value: "javascript"
          });
          result.labels.push({
            name: LabelName.FRAMEWORK,
            value: "cypress"
          });
          result.labels.push(...suiteLabels);
          result.labels.push(...titleMetadata.labels);
          this.runtime.applyRuntimeMessages(messages.slice(1, messages.length - 1), {
            testUuid
          });
        }, testUuid);
        this.runtime.updateTest(result => {
          result.stage = endMessage.data.stage;
          result.status = endMessage.data.status;
          if (!endMessage.data.statusDetails) {
            return;
          }
          result.statusDetails = endMessage.data.statusDetails;
        }, testUuid);
        this.runtime.stopTest({
          uuid: testUuid,
          stop: Date.now()
        });
        if (startMessage.data.isInteractive) {
          this.runtime.writeTest(testUuid);
        } else {
          // False positive by eslint (testUuid is string)
          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
          this.pushTestUuid(startMessage.data.absolutePath, testUuid);
        }
        return null;
      }
    });
  }
  endSpec(spec, cypressResult) {
    var testUuids = this.testsUuidsByCypressAbsolutePath.get(spec.absolute);
    this.testsUuidsByCypressAbsolutePath.delete(spec.absolute);
    if (!testUuids) {
      return;
    }
    for (var uuid of testUuids) {
      // TODO add it to spec scope to remove duplicates.
      if (cypressResult.video) {
        this.runtime.writeAttachmentFromPath("Video", cypressResult.video, {
          contentType: ContentType.MP4
        }, uuid);
      }
      this.runtime.writeTest(uuid);
    }
  }
}
export var allureCypress = (on, allureConfig) => {
  var allureCypressReporter = new AllureCypress(allureConfig);
  allureCypressReporter.attachToCypress(on);
  on("after:spec", (spec, result) => {
    allureCypressReporter.endSpec(spec, result);
  });
  return allureCypressReporter;
};
//# sourceMappingURL=reporter.js.map