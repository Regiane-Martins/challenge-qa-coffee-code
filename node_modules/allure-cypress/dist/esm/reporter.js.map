{"version":3,"file":"reporter.js","names":["ContentType","LabelName","Stage","extractMetadataFromString","FileSystemWriter","ReporterRuntime","getSuiteLabels","AllureCypress","constructor","config","_defineProperty","Map","_ref","resultsDir","rest","_objectWithoutProperties","_excluded","runtime","_objectSpread","writer","pushTestUuid","absolutePath","uuid","currentUuids","testsUuidsByCypressAbsolutePath","get","set","attachToCypress","on","allureReportTest","messages","startMessage","endMessage","length","type","Error","suiteLabels","data","specPath","slice","testTitle","titleMetadata","testUuid","startTest","name","cleanTitle","start","fullName","concat","filename","join","stage","RUNNING","updateTest","result","labels","push","LANGUAGE","value","FRAMEWORK","applyRuntimeMessages","status","statusDetails","stopTest","stop","Date","now","isInteractive","writeTest","endSpec","spec","cypressResult","testUuids","absolute","delete","video","writeAttachmentFromPath","contentType","MP4","allureCypress","allureConfig","allureCypressReporter"],"sources":["../../src/reporter.ts"],"sourcesContent":["import type Cypress from \"cypress\";\nimport { ContentType, LabelName, Stage } from \"allure-js-commons\";\nimport { extractMetadataFromString } from \"allure-js-commons/sdk\";\nimport { FileSystemWriter, ReporterRuntime, getSuiteLabels } from \"allure-js-commons/sdk/reporter\";\nimport type { CypressRuntimeMessage, CypressTestEndRuntimeMessage, CypressTestStartRuntimeMessage } from \"./model.js\";\n\nexport type AllureCypressConfig = {\n  resultsDir?: string;\n  links?: {\n    type: string;\n    urlTemplate: string;\n  }[];\n};\n\nexport class AllureCypress {\n  runtime: ReporterRuntime;\n\n  testsUuidsByCypressAbsolutePath = new Map<string, string[]>();\n\n  constructor(config?: AllureCypressConfig) {\n    const { resultsDir = \"./allure-results\", ...rest } = config || {};\n\n    this.runtime = new ReporterRuntime({\n      writer: new FileSystemWriter({\n        resultsDir,\n      }),\n      ...rest,\n    });\n  }\n\n  private pushTestUuid(absolutePath: string, uuid: string) {\n    const currentUuids = this.testsUuidsByCypressAbsolutePath.get(absolutePath) || [];\n\n    this.testsUuidsByCypressAbsolutePath.set(absolutePath, [...currentUuids, uuid]);\n  }\n\n  attachToCypress(on: Cypress.PluginEvents) {\n    on(\"task\", {\n      allureReportTest: (messages: CypressRuntimeMessage[]) => {\n        const startMessage = messages[0] as CypressTestStartRuntimeMessage;\n        const endMessage = messages[messages.length - 1] as CypressTestEndRuntimeMessage;\n\n        if (startMessage.type !== \"cypress_start\" || endMessage.type !== \"cypress_end\") {\n          throw new Error(\"INTERNAL ERROR: Invalid message sequence\");\n        }\n\n        const suiteLabels = getSuiteLabels(startMessage.data.specPath.slice(0, -1));\n        const testTitle = startMessage.data.specPath[startMessage.data.specPath.length - 1];\n        const titleMetadata = extractMetadataFromString(testTitle);\n        const testUuid = this.runtime.startTest({\n          name: titleMetadata.cleanTitle || testTitle,\n          start: startMessage.data.start,\n          fullName: `${startMessage.data.filename}#${startMessage.data.specPath.join(\" \")}`,\n          stage: Stage.RUNNING,\n        });\n\n        this.runtime.updateTest((result) => {\n          result.labels.push({\n            name: LabelName.LANGUAGE,\n            value: \"javascript\",\n          });\n          result.labels.push({\n            name: LabelName.FRAMEWORK,\n            value: \"cypress\",\n          });\n          result.labels.push(...suiteLabels);\n          result.labels.push(...titleMetadata.labels);\n\n          this.runtime.applyRuntimeMessages(messages.slice(1, messages.length - 1), {\n            testUuid,\n          });\n        }, testUuid);\n        this.runtime.updateTest((result) => {\n          result.stage = endMessage.data.stage;\n          result.status = endMessage.data.status;\n\n          if (!endMessage.data.statusDetails) {\n            return;\n          }\n\n          result.statusDetails = endMessage.data.statusDetails;\n        }, testUuid);\n\n        this.runtime.stopTest({ uuid: testUuid, stop: Date.now() });\n\n        if (startMessage.data.isInteractive) {\n          this.runtime.writeTest(testUuid);\n        } else {\n          // False positive by eslint (testUuid is string)\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          this.pushTestUuid(startMessage.data.absolutePath, testUuid);\n        }\n\n        return null;\n      },\n    });\n  }\n\n  endSpec(spec: Cypress.Spec, cypressResult: CypressCommandLine.RunResult) {\n    const testUuids = this.testsUuidsByCypressAbsolutePath.get(spec.absolute);\n    this.testsUuidsByCypressAbsolutePath.delete(spec.absolute);\n\n    if (!testUuids) {\n      return;\n    }\n\n    for (const uuid of testUuids) {\n      // TODO add it to spec scope to remove duplicates.\n      if (cypressResult.video) {\n        this.runtime.writeAttachmentFromPath(\n          \"Video\",\n          cypressResult.video,\n          {\n            contentType: ContentType.MP4,\n          },\n          uuid,\n        );\n      }\n\n      this.runtime.writeTest(uuid);\n    }\n  }\n}\n\nexport const allureCypress = (on: Cypress.PluginEvents, allureConfig?: AllureCypressConfig) => {\n  const allureCypressReporter = new AllureCypress(allureConfig);\n\n  allureCypressReporter.attachToCypress(on);\n\n  on(\"after:spec\", (spec, result) => {\n    allureCypressReporter.endSpec(spec, result);\n  });\n\n  return allureCypressReporter;\n};\n"],"mappings":";;;;;;;;AACA,SAASA,WAAW,EAAEC,SAAS,EAAEC,KAAK,QAAQ,mBAAmB;AACjE,SAASC,yBAAyB,QAAQ,uBAAuB;AACjE,SAASC,gBAAgB,EAAEC,eAAe,EAAEC,cAAc,QAAQ,gCAAgC;AAWlG,OAAO,MAAMC,aAAa,CAAC;EAKzBC,WAAWA,CAACC,MAA4B,EAAE;IAAAC,eAAA;IAAAA,eAAA,0CAFR,IAAIC,GAAG,CAAmB,CAAC;IAG3D,IAAAC,IAAA,GAAqDH,MAAM,IAAI,CAAC,CAAC;MAA3D;QAAEI,UAAU,GAAG;MAA4B,CAAC,GAAAD,IAAA;MAANE,IAAI,GAAAC,wBAAA,CAAAH,IAAA,EAAAI,SAAA;IAEhD,IAAI,CAACC,OAAO,GAAG,IAAIZ,eAAe,CAAAa,aAAA;MAChCC,MAAM,EAAE,IAAIf,gBAAgB,CAAC;QAC3BS;MACF,CAAC;IAAC,GACCC,IAAI,CACR,CAAC;EACJ;EAEQM,YAAYA,CAACC,YAAoB,EAAEC,IAAY,EAAE;IACvD,IAAMC,YAAY,GAAG,IAAI,CAACC,+BAA+B,CAACC,GAAG,CAACJ,YAAY,CAAC,IAAI,EAAE;IAEjF,IAAI,CAACG,+BAA+B,CAACE,GAAG,CAACL,YAAY,EAAE,CAAC,GAAGE,YAAY,EAAED,IAAI,CAAC,CAAC;EACjF;EAEAK,eAAeA,CAACC,EAAwB,EAAE;IACxCA,EAAE,CAAC,MAAM,EAAE;MACTC,gBAAgB,EAAGC,QAAiC,IAAK;QACvD,IAAMC,YAAY,GAAGD,QAAQ,CAAC,CAAC,CAAmC;QAClE,IAAME,UAAU,GAAGF,QAAQ,CAACA,QAAQ,CAACG,MAAM,GAAG,CAAC,CAAiC;QAEhF,IAAIF,YAAY,CAACG,IAAI,KAAK,eAAe,IAAIF,UAAU,CAACE,IAAI,KAAK,aAAa,EAAE;UAC9E,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;QAC7D;QAEA,IAAMC,WAAW,GAAG9B,cAAc,CAACyB,YAAY,CAACM,IAAI,CAACC,QAAQ,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3E,IAAMC,SAAS,GAAGT,YAAY,CAACM,IAAI,CAACC,QAAQ,CAACP,YAAY,CAACM,IAAI,CAACC,QAAQ,CAACL,MAAM,GAAG,CAAC,CAAC;QACnF,IAAMQ,aAAa,GAAGtC,yBAAyB,CAACqC,SAAS,CAAC;QAC1D,IAAME,QAAQ,GAAG,IAAI,CAACzB,OAAO,CAAC0B,SAAS,CAAC;UACtCC,IAAI,EAAEH,aAAa,CAACI,UAAU,IAAIL,SAAS;UAC3CM,KAAK,EAAEf,YAAY,CAACM,IAAI,CAACS,KAAK;UAC9BC,QAAQ,KAAAC,MAAA,CAAKjB,YAAY,CAACM,IAAI,CAACY,QAAQ,OAAAD,MAAA,CAAIjB,YAAY,CAACM,IAAI,CAACC,QAAQ,CAACY,IAAI,CAAC,GAAG,CAAC,CAAE;UACjFC,KAAK,EAAEjD,KAAK,CAACkD;QACf,CAAC,CAAC;QAEF,IAAI,CAACnC,OAAO,CAACoC,UAAU,CAAEC,MAAM,IAAK;UAClCA,MAAM,CAACC,MAAM,CAACC,IAAI,CAAC;YACjBZ,IAAI,EAAE3C,SAAS,CAACwD,QAAQ;YACxBC,KAAK,EAAE;UACT,CAAC,CAAC;UACFJ,MAAM,CAACC,MAAM,CAACC,IAAI,CAAC;YACjBZ,IAAI,EAAE3C,SAAS,CAAC0D,SAAS;YACzBD,KAAK,EAAE;UACT,CAAC,CAAC;UACFJ,MAAM,CAACC,MAAM,CAACC,IAAI,CAAC,GAAGpB,WAAW,CAAC;UAClCkB,MAAM,CAACC,MAAM,CAACC,IAAI,CAAC,GAAGf,aAAa,CAACc,MAAM,CAAC;UAE3C,IAAI,CAACtC,OAAO,CAAC2C,oBAAoB,CAAC9B,QAAQ,CAACS,KAAK,CAAC,CAAC,EAAET,QAAQ,CAACG,MAAM,GAAG,CAAC,CAAC,EAAE;YACxES;UACF,CAAC,CAAC;QACJ,CAAC,EAAEA,QAAQ,CAAC;QACZ,IAAI,CAACzB,OAAO,CAACoC,UAAU,CAAEC,MAAM,IAAK;UAClCA,MAAM,CAACH,KAAK,GAAGnB,UAAU,CAACK,IAAI,CAACc,KAAK;UACpCG,MAAM,CAACO,MAAM,GAAG7B,UAAU,CAACK,IAAI,CAACwB,MAAM;UAEtC,IAAI,CAAC7B,UAAU,CAACK,IAAI,CAACyB,aAAa,EAAE;YAClC;UACF;UAEAR,MAAM,CAACQ,aAAa,GAAG9B,UAAU,CAACK,IAAI,CAACyB,aAAa;QACtD,CAAC,EAAEpB,QAAQ,CAAC;QAEZ,IAAI,CAACzB,OAAO,CAAC8C,QAAQ,CAAC;UAAEzC,IAAI,EAAEoB,QAAQ;UAAEsB,IAAI,EAAEC,IAAI,CAACC,GAAG,CAAC;QAAE,CAAC,CAAC;QAE3D,IAAInC,YAAY,CAACM,IAAI,CAAC8B,aAAa,EAAE;UACnC,IAAI,CAAClD,OAAO,CAACmD,SAAS,CAAC1B,QAAQ,CAAC;QAClC,CAAC,MAAM;UACL;UACA;UACA,IAAI,CAACtB,YAAY,CAACW,YAAY,CAACM,IAAI,CAAChB,YAAY,EAAEqB,QAAQ,CAAC;QAC7D;QAEA,OAAO,IAAI;MACb;IACF,CAAC,CAAC;EACJ;EAEA2B,OAAOA,CAACC,IAAkB,EAAEC,aAA2C,EAAE;IACvE,IAAMC,SAAS,GAAG,IAAI,CAAChD,+BAA+B,CAACC,GAAG,CAAC6C,IAAI,CAACG,QAAQ,CAAC;IACzE,IAAI,CAACjD,+BAA+B,CAACkD,MAAM,CAACJ,IAAI,CAACG,QAAQ,CAAC;IAE1D,IAAI,CAACD,SAAS,EAAE;MACd;IACF;IAEA,KAAK,IAAMlD,IAAI,IAAIkD,SAAS,EAAE;MAC5B;MACA,IAAID,aAAa,CAACI,KAAK,EAAE;QACvB,IAAI,CAAC1D,OAAO,CAAC2D,uBAAuB,CAClC,OAAO,EACPL,aAAa,CAACI,KAAK,EACnB;UACEE,WAAW,EAAE7E,WAAW,CAAC8E;QAC3B,CAAC,EACDxD,IACF,CAAC;MACH;MAEA,IAAI,CAACL,OAAO,CAACmD,SAAS,CAAC9C,IAAI,CAAC;IAC9B;EACF;AACF;AAEA,OAAO,IAAMyD,aAAa,GAAGA,CAACnD,EAAwB,EAAEoD,YAAkC,KAAK;EAC7F,IAAMC,qBAAqB,GAAG,IAAI1E,aAAa,CAACyE,YAAY,CAAC;EAE7DC,qBAAqB,CAACtD,eAAe,CAACC,EAAE,CAAC;EAEzCA,EAAE,CAAC,YAAY,EAAE,CAAC0C,IAAI,EAAEhB,MAAM,KAAK;IACjC2B,qBAAqB,CAACZ,OAAO,CAACC,IAAI,EAAEhB,MAAM,CAAC;EAC7C,CAAC,CAAC;EAEF,OAAO2B,qBAAqB;AAC9B,CAAC","ignoreList":[]}