{"version":3,"file":"reporter.js","names":["_allureJsCommons","require","_sdk","_reporter","_excluded","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_objectWithoutProperties","i","_objectWithoutPropertiesLoose","n","indexOf","propertyIsEnumerable","call","hasOwnProperty","_toPropertyKey","value","configurable","writable","_toPrimitive","Symbol","toPrimitive","TypeError","String","Number","AllureCypress","constructor","config","Map","_ref","resultsDir","rest","runtime","ReporterRuntime","writer","FileSystemWriter","pushTestUuid","absolutePath","uuid","currentUuids","testsUuidsByCypressAbsolutePath","get","set","attachToCypress","on","allureReportTest","messages","startMessage","endMessage","type","Error","suiteLabels","getSuiteLabels","data","specPath","slice","testTitle","titleMetadata","extractMetadataFromString","testUuid","startTest","name","cleanTitle","start","fullName","concat","filename","join","stage","Stage","RUNNING","updateTest","result","labels","LabelName","LANGUAGE","FRAMEWORK","applyRuntimeMessages","status","statusDetails","stopTest","stop","Date","now","isInteractive","writeTest","endSpec","spec","cypressResult","testUuids","absolute","delete","video","writeAttachmentFromPath","contentType","ContentType","MP4","exports","allureCypress","allureConfig","allureCypressReporter"],"sources":["../../src/reporter.ts"],"sourcesContent":["import type Cypress from \"cypress\";\nimport { ContentType, LabelName, Stage } from \"allure-js-commons\";\nimport { extractMetadataFromString } from \"allure-js-commons/sdk\";\nimport { FileSystemWriter, ReporterRuntime, getSuiteLabels } from \"allure-js-commons/sdk/reporter\";\nimport type { CypressRuntimeMessage, CypressTestEndRuntimeMessage, CypressTestStartRuntimeMessage } from \"./model.js\";\n\nexport type AllureCypressConfig = {\n  resultsDir?: string;\n  links?: {\n    type: string;\n    urlTemplate: string;\n  }[];\n};\n\nexport class AllureCypress {\n  runtime: ReporterRuntime;\n\n  testsUuidsByCypressAbsolutePath = new Map<string, string[]>();\n\n  constructor(config?: AllureCypressConfig) {\n    const { resultsDir = \"./allure-results\", ...rest } = config || {};\n\n    this.runtime = new ReporterRuntime({\n      writer: new FileSystemWriter({\n        resultsDir,\n      }),\n      ...rest,\n    });\n  }\n\n  private pushTestUuid(absolutePath: string, uuid: string) {\n    const currentUuids = this.testsUuidsByCypressAbsolutePath.get(absolutePath) || [];\n\n    this.testsUuidsByCypressAbsolutePath.set(absolutePath, [...currentUuids, uuid]);\n  }\n\n  attachToCypress(on: Cypress.PluginEvents) {\n    on(\"task\", {\n      allureReportTest: (messages: CypressRuntimeMessage[]) => {\n        const startMessage = messages[0] as CypressTestStartRuntimeMessage;\n        const endMessage = messages[messages.length - 1] as CypressTestEndRuntimeMessage;\n\n        if (startMessage.type !== \"cypress_start\" || endMessage.type !== \"cypress_end\") {\n          throw new Error(\"INTERNAL ERROR: Invalid message sequence\");\n        }\n\n        const suiteLabels = getSuiteLabels(startMessage.data.specPath.slice(0, -1));\n        const testTitle = startMessage.data.specPath[startMessage.data.specPath.length - 1];\n        const titleMetadata = extractMetadataFromString(testTitle);\n        const testUuid = this.runtime.startTest({\n          name: titleMetadata.cleanTitle || testTitle,\n          start: startMessage.data.start,\n          fullName: `${startMessage.data.filename}#${startMessage.data.specPath.join(\" \")}`,\n          stage: Stage.RUNNING,\n        });\n\n        this.runtime.updateTest((result) => {\n          result.labels.push({\n            name: LabelName.LANGUAGE,\n            value: \"javascript\",\n          });\n          result.labels.push({\n            name: LabelName.FRAMEWORK,\n            value: \"cypress\",\n          });\n          result.labels.push(...suiteLabels);\n          result.labels.push(...titleMetadata.labels);\n\n          this.runtime.applyRuntimeMessages(messages.slice(1, messages.length - 1), {\n            testUuid,\n          });\n        }, testUuid);\n        this.runtime.updateTest((result) => {\n          result.stage = endMessage.data.stage;\n          result.status = endMessage.data.status;\n\n          if (!endMessage.data.statusDetails) {\n            return;\n          }\n\n          result.statusDetails = endMessage.data.statusDetails;\n        }, testUuid);\n\n        this.runtime.stopTest({ uuid: testUuid, stop: Date.now() });\n\n        if (startMessage.data.isInteractive) {\n          this.runtime.writeTest(testUuid);\n        } else {\n          // False positive by eslint (testUuid is string)\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          this.pushTestUuid(startMessage.data.absolutePath, testUuid);\n        }\n\n        return null;\n      },\n    });\n  }\n\n  endSpec(spec: Cypress.Spec, cypressResult: CypressCommandLine.RunResult) {\n    const testUuids = this.testsUuidsByCypressAbsolutePath.get(spec.absolute);\n    this.testsUuidsByCypressAbsolutePath.delete(spec.absolute);\n\n    if (!testUuids) {\n      return;\n    }\n\n    for (const uuid of testUuids) {\n      // TODO add it to spec scope to remove duplicates.\n      if (cypressResult.video) {\n        this.runtime.writeAttachmentFromPath(\n          \"Video\",\n          cypressResult.video,\n          {\n            contentType: ContentType.MP4,\n          },\n          uuid,\n        );\n      }\n\n      this.runtime.writeTest(uuid);\n    }\n  }\n}\n\nexport const allureCypress = (on: Cypress.PluginEvents, allureConfig?: AllureCypressConfig) => {\n  const allureCypressReporter = new AllureCypress(allureConfig);\n\n  allureCypressReporter.attachToCypress(on);\n\n  on(\"after:spec\", (spec, result) => {\n    allureCypressReporter.endSpec(spec, result);\n  });\n\n  return allureCypressReporter;\n};\n"],"mappings":"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","ignoreList":[]}